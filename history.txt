#V2
CREATE guitar_pickups CONTENT { guitar_id: $g.id, position: 'Bridge', type: 'Humbucker', model: 'PAF Humbucker', winding: '' };
CREATE guitar_controls CONTENT { guitar_id: $g.id, name: 'Volume', detail: 'CTS 550k Potentiometer' };
CREATE guitar_controls CONTENT { guitar_id: $g.id, name: 'Tone', detail: 'CTS 550k Potentiometer' };
CREATE guitar_controls CONTENT { guitar_id: $g.id, name: '3-way Toggleswitch', detail: 'Switchcraft' };
-- Summary (optional)
SELECT id, brand, model FROM guitars WHERE id = $g.id;
SELECT count() AS pickup_count FROM guitar_pickups WHERE guitar_id = $g.id;
SELECT count() AS control_count FROM guitar_controls WHERE guitar_id = $g.id;
INFO FOR DB;
SELECT * FROM guitars;
-- Add slug field to guitars table
DEFINE FIELD slug ON guitars TYPE string;
-- Update existing guitars with slug values
-- Add slug field to guitars table
DEFINE FIELD slug ON guitars TYPE string;
-- Update existing guitars with slug values (using string::slug instead of slugify)
UPDATE guitars SET slug = string::slug(brand + "-" + model + "-" + year_reference) WHERE slug = NONE;
-- Create index on slug for faster lookups
DEFINE INDEX slug_idx ON guitars FIELDS slug UNIQUE;
UPDATE guitars SET slug = string::lowercase(brand + '-' + model + '-' + year_reference);
SELECT id, brand, model, year_reference FROM guitars LIMIT 3;
UPDATE guitars SET slug = brand + '-' + model + '-' + year_reference;
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = 'banker-58-spec-v-1958';
SELECT id, brand, model, slug FROM guitars LIMIT 3;
UPDATE guitars SET slug = 'test-slug';
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = 'banker-58-spec-v-1958';
-- Add slug field to guitars table
DEFINE FIELD slug ON guitars TYPE string;
-- Update existing guitars with slug values (using string::slug instead of slugify)
UPDATE guitars SET slug = string::slug(brand + "-" + model + "-" + year_reference) WHERE slug = NONE;
-- Create index on slug for faster lookups
DEFINE INDEX slug_idx ON guitars FIELDS slug UNIQUE;
-- Simple slug update without complex string operations
-- Update each record individually with basic slugs
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = "banker-58-spec-v-1958";
UPDATE guitars:cmq04skqf5ecw3vg8mvd SET slug = "banker-ironman-ct-standard";
UPDATE guitars:juxnqy7ts6x887t8dk2l SET slug = "test-unit";
-- Show results
SELECT id, brand, model, slug FROM guitars;
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = 'test-slug';
-- Add slug field to guitars table
DEFINE FIELD slug ON guitars TYPE string;
-- Update existing guitars with slug values (using string::slug instead of slugify)
UPDATE guitars SET slug = string::slug(brand + "-" + model + "-" + year_reference) WHERE slug = NONE;
-- Create index on slug for faster lookups
DEFINE INDEX slug_idx ON guitars FIELDS slug UNIQUE;
-- Manual slug updates - one record at a time
-- This avoids the "excessive computation depth" issue
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = "banker-58-spec-v-1958";
UPDATE guitars:cmq04skqf5ecw3vg8mvd SET slug = "banker-ironman-ct-standard";  
UPDATE guitars:juxnqy7ts6x887t8dk2l SET slug = "test-unit";
UPDATE guitars:xlx55xia6b2alzxk66ft SET slug = "test2-unit";
INFO FOR DB;
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Check the table schema to see what fields are defined
INFO FOR TABLE guitars;
-- Try to update a single record with a simple slug
-- This will help us test if the field exists and can be updated
UPDATE guitars:7f8oq0nfi7neirahoxpe SET slug = "test-slug-123";
-- Test what the actual slug should be
-- Let's see the exact data format
SELECT brand, model, year_reference FROM guitars LIMIT 1;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Check the table schema to see what fields are defined
INFO FOR TABLE guitars;
INFO FOR DB;
SELECT * FROM guitars;
SELECT * FROM guitars LIMIT 1;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
-- Add slug field to guitars table
DEFINE FIELD slug ON guitars TYPE string;
-- Update existing guitars with slug values (using string::slug instead of slugify)
UPDATE guitars SET slug = string::slug(brand + "-" + model + "-" + year_reference) WHERE slug = NONE;
-- Create index on slug for faster lookups
DEFINE INDEX slug_idx ON guitars FIELDS slug UNIQUE;
-- Select all guitars to examine data structure
-- This will help us understand why UPDATE operations are failing
SELECT * FROM guitars;
